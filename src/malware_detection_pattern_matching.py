import os
import pefile
import hashlib
import oletools.olevba as olevba
from collections import Counter
import math
import PyPDF2
import zipfile
import concurrent.futures
import time
import re

# Define suspicious keywords at the top level
suspicious_keywords = ["cmd.exe", "powershell.exe", "wscript.shell", "regsvr32", "certutil"]

# Regex patterns to replace YARA rules
REGEX_PATTERNS = {
    "SuspiciousPE": [
        r"MZ",  # PE file signature
        r"This program cannot be run in DOS mode.",
        r"cmd\.exe",
        r"powershell\.exe",
        r"CreateProcess",
        r"WinExec",
        r"ShellExecute",
        r"wscript\.shell",
        r"regsvr32",
        r"certutil",
    ],
    "SuspiciousScript": [
        r"eval\(",
        r"base64_decode\(",
        r"shell_exec\(",
        r"exec\(",
    ],
}

# Initialize counters
total_scans = 0
true_positives = 0
true_negatives = 0
false_positives = 0
false_negatives = 0

# Maximum file size limit (10 MB)
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB

def sanitize_filename(filename):
    """Sanitizes the file name to prevent directory traversal and other attacks."""
    return re.sub(r"[^\w\-_.]", "_", filename)

def scan_file(file_path, is_malicious):
    """Scans a file for malware indicators."""
    global total_scans, true_positives, true_negatives, false_positives, false_negatives

    total_scans += 1
    results = {"file_name": os.path.basename(file_path), "malicious": False, "indicators": [], "risk_score": 0}

    print(f"\nScanning file: {file_path}")

    # Input validation
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return results

    if not os.path.isfile(file_path):
        print(f"Path is not a file: {file_path}")
        return results

    # Check file size
    file_size = os.path.getsize(file_path)
    if file_size > MAX_FILE_SIZE:
        results["indicators"].append(f"File size exceeds limit: {file_size} bytes")
        print(f"File size exceeds limit: {file_size} bytes")
        return results

    # Regex-based pattern matching
    with open(file_path, "rb") as f:
        file_content = f.read().decode(errors="ignore")  # Decode for regex matching

        for rule_name, patterns in REGEX_PATTERNS.items():
            for pattern in patterns:
                if re.search(pattern, file_content, re.IGNORECASE):
                    results["malicious"] = True
                    results["indicators"].append(f"Regex matched: {pattern} (Rule: {rule_name})")
                    results["risk_score"] += 30  # Increase risk score for regex matches
                    print(f"Regex matched: {pattern} (Rule: {rule_name})")

    # EICAR test file check
    if b"X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*" in file_content.encode():
        results["malicious"] = True
        results["indicators"].append("EICAR test file detected.")
        results["risk_score"] += 100  # Maximum risk score for EICAR
        print("EICAR test file detected.")

    # Check for suspicious content in .txt files
    if file_path.endswith(".txt"):
        for keyword in suspicious_keywords:
            if keyword.encode() in file_content.encode():
                results["malicious"] = True
                results["indicators"].append(f"Suspicious keyword detected: {keyword}")
                results["risk_score"] += 20  # Increase risk score for suspicious keywords
                print(f"Suspicious keyword detected: {keyword}")

    # Enhanced PDF analysis
    if file_path.endswith(".pdf"):
        try:
            pdf_file = open(file_path, "rb")
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            extracted_text = ""
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                extracted_text += page.extract_text() if page.extract_text() else ""
            if extracted_text:
                # Check for suspicious patterns (e.g., long strings of random characters)
                if any(len(word) > 50 for word in extracted_text.split()):
                    results["malicious"] = True
                    results["indicators"].append("Suspicious pattern detected in PDF.")
                    results["risk_score"] += 25  # Increase risk score for suspicious patterns
                    print("Suspicious pattern detected in PDF.")
                # Check for embedded JavaScript
                if "/JS" in extracted_text or "/JavaScript" in extracted_text:
                    results["malicious"] = True
                    results["indicators"].append("Embedded JavaScript detected in PDF.")
                    results["risk_score"] += 30  # Increase risk score for embedded JavaScript
                    print("Embedded JavaScript detected in PDF.")
        except Exception as e:
            results["indicators"].append(f"PDF analysis failed: {str(e)}")
            print(f"PDF analysis failed: {str(e)}")

    # PE File Analysis
    if file_path.endswith((".exe", ".dll")):
        try:
            pe = pefile.PE(file_path)
            suspicious_imports = ["LoadLibrary", "GetProcAddress", "VirtualAlloc", "CreateRemoteThread", "CreateProcess", "WinExec", "ShellExecute"]
            imported_functions = [
                imp.name.decode() for entry in pe.DIRECTORY_ENTRY_IMPORT for imp in entry.imports if imp.name
            ]
            found_imports = [imp for imp in imported_functions if imp in suspicious_imports]
            
            if found_imports:
                results["malicious"] = True
                results["indicators"].append(f"Suspicious API calls: {found_imports}")
                results["risk_score"] += 40  # Increase risk score for suspicious API calls
                print(f"Suspicious API calls detected: {found_imports}")

            # High entropy check
            entropy = calculate_entropy(pe)
            if entropy > 7.5:
                results["malicious"] = True
                results["indicators"].append(f"High entropy detected: {entropy:.2f}")
                results["risk_score"] += 35  # Increase risk score for high entropy
                print(f"High entropy detected: {entropy:.2f}")

        except Exception as e:
            results["indicators"].append(f"PE analysis failed: {str(e)}")
            print(f"PE analysis failed: {str(e)}")

    # Macro Analysis
    if file_path.endswith((".docx", ".xlsm", ".pptm")):
        macros = extract_macros(file_path)
        if macros:
            results["malicious"] = True
            results["indicators"].append("Suspicious macros found.")
            results["risk_score"] += 50  # Increase risk score for macros
            print("Suspicious macros found.")

    # ZIP File Analysis
    if file_path.endswith(".zip"):
        try:
            with zipfile.ZipFile(file_path, "r") as zip_ref:
                for file in zip_ref.namelist():
                    if file.endswith((".exe", ".dll", ".vbs")):
                        results["malicious"] = True
                        results["indicators"].append(f"Suspicious file in ZIP: {file}")
                        results["risk_score"] += 30  # Increase risk score for suspicious files in ZIP
                        print(f"Suspicious file in ZIP: {file}")
        except Exception as e:
            results["indicators"].append(f"ZIP analysis failed: {str(e)}")
            print(f"ZIP analysis failed: {str(e)}")

    # Hash Check (Example: Add known malware hashes here)
    malware_hashes = ["e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"]  # Example hash
    file_hash = hashlib.sha256(open(file_path, "rb").read()).hexdigest()
    if file_hash in malware_hashes:
        results["malicious"] = True
        results["indicators"].append(f"Known malware hash detected: {file_hash}")
        results["risk_score"] += 100  # Maximum risk score for known malware hash
        print(f"Known malware hash detected: {file_hash}")

    # Cap risk score at 100
    results["risk_score"] = min(results["risk_score"], 100)

    # Update accuracy counters
    if results["malicious"]:
        if is_malicious:
            true_positives += 1  # Correct detection
        else:
            false_positives += 1  # Wrong detection
    else:
        if is_malicious:
            false_negatives += 1  # Missed detection
        else:
            true_negatives += 1  # Correct detection

    return results

def calculate_entropy(pe):
    """Calculates entropy of a PE file."""
    data = b"".join(section.get_data() for section in pe.sections)
    counter = Counter(data)
    
    entropy = -sum((count / len(data)) * math.log2(count / len(data)) for count in counter.values())
    return entropy

def extract_macros(file_path):
    """Extracts macros from Office files."""
    vba_parser = olevba.VBA_Parser(file_path)
    if vba_parser.detect_vba_macros():
        return [macro[3] for macro in vba_parser.extract_macros()]
    return None

def process_files_concurrently(file_paths):
    """Processes multiple files concurrently."""
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = [executor.submit(scan_file, file_path, is_malicious) for file_path, is_malicious in file_paths]
        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            print("\n==== Scan Result ====")
            print(f"File: {result['file_name']}")
            print(f"Verdict: {'Malicious' if result['malicious'] else 'Clean'}")
            print(f"Risk Score: {result['risk_score']}/100")
            if result["indicators"]:
                print("Indicators:")
                for indicator in result["indicators"]:
                    print(f"  - {indicator}")

def get_detection_accuracy():
    """Calculates detection accuracy and false positive/negative rates."""
    if total_scans == 0:
        return {"accuracy": "N/A", "false_positive_rate": "N/A", "false_negative_rate": "N/A"}

    accuracy = ((true_positives + true_negatives) / total_scans) * 100
    false_positive_rate = (false_positives / total_scans) * 100
    false_negative_rate = (false_negatives / total_scans) * 100

    return {
        "accuracy": accuracy,
        "false_positive_rate": false_positive_rate,
        "false_negative_rate": false_negative_rate
    }

if __name__ == "__main__":
    # Example scans with known labels
    test_files = [
        ("src/Malware_Detection_Web_Application_Beluga_Report.pdf", False),
    ]

    start_time = time.time()
    process_files_concurrently(test_files)
    end_time = time.time()

    # Print Detection Statistics
    stats = get_detection_accuracy()
    print("\n==== Detection Statistics ====")
    print(f"Total Scans: {total_scans}")
    print(f"Detection Accuracy: {stats['accuracy']:.2f}%")
    print(f"False Positive Rate: {stats['false_positive_rate']:.2f}%")
    print(f"False Negative Rate: {stats['false_negative_rate']:.2f}%")
    print(f"Total time taken: {end_time - start_time:.2f} seconds")